---
import KeyRow from "./keyboard/KeyRow.astro";
import KeyTile from "./keyboard/KeyTile.astro";
import DeleteIcon from "../../assets/icons/delete.svg";

import { KEYBOARD_KEYS } from "../../lib/config";
---

<div class="keyboard-container">
  <KeyRow keys={KEYBOARD_KEYS[0]}></KeyRow>
  <KeyRow keys={KEYBOARD_KEYS[1]}></KeyRow>
  <KeyRow keys={KEYBOARD_KEYS[2]}>
    <KeyTile slot="enter-key" class="enter-key">
      ENTER
    </KeyTile>
    <KeyTile slot="delete-key" class="delete-key">
      <DeleteIcon class="delete-icon" />
    </KeyTile>
  </KeyRow>
</div>

<style>
  .keyboard-container {
    position: relative;
    width: fit-content;
    border: 2px solid var(--secondary-border);
    padding: .5rem 1rem;
    border-radius: .5rem;
  }

  .delete-icon {
    width: 2rem;
    height: auto;
    aspect-ratio: 1 / 1;
  }
</style>

<script>
  import type { GameSession } from "../../lib/gameSession";



  const keyTiles = document.querySelectorAll<HTMLDivElement>('.key-tile');
  let gameSession: GameSession;

  

  // Gets current gameSession and updates the keyboard
  window.addEventListener("updateDigitalKeyboard", (e) => {
    gameSession = (e as CustomEvent).detail.gameSession;
    keyHighlighting();
  });



  // Listen for keyboard usage
  keyTiles.forEach(keyTile => {
    keyTile.addEventListener('click', () => {
      const key = (() => {
        if (keyTile.classList.contains('enter-key')) return "ENTER";
        if (keyTile.classList.contains('delete-key')) return "BACKSPACE";
        return keyTile.firstElementChild?.textContent;
      })();
      
      const event = new CustomEvent("keyInput", {
        detail: {
          keyInput: key,
        }
      });
      window.dispatchEvent(event);
    });
  });



  /**
   * Reads the scoring values for all guesses made.
   * @returns A map with the color and the corresponding characters.
   */
  function extractGuessFeedback(): Map<string, string[]> {
    const map = new Map<string, string[]>();
    map.set("green", []);
    map.set("gray", []);
    map.set("yellow", []);

    gameSession.guesses?.forEach(guess => {
      guess.character_info.forEach(char => {
        map.get(char.scoring)?.push(char.character.toUpperCase());
      });
    });

    return map;
  }



  /**
   * Colors the keyboard tiles.
   */
  function keyHighlighting(): void {
    // Reset the keyboard colors
    keyTiles.forEach(keyTile => {
      keyTile.classList.remove('key-feedback-gray', 'key-feedback-yellow', 'key-feedback-green');
    });
    
    // Get characters and colors
    const map: Map<string, string[]> = extractGuessFeedback();

    keyTiles.forEach(tile => {
      const char = tile.firstElementChild?.textContent;
      // 'Enter' and 'Backspace' are excluded
      if (char == null || char.length > 1) {
        return; 
      }

      map.forEach((value, key) => {
        if (value.includes(char)) {
          tile.classList.add(`key-feedback-${key}`);
        }
      });
    });
  }
</script>