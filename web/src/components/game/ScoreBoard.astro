---

---

<div class=score-board>
  <div class="user-info-container">
    <div class="user-picture-container">
      <img class="user-picture" src="" />
    </div>
    <span class="user-name">DominicBrauer</span>
  </div>
  <hr>
  <div class="game-info-container">
    <span class="round-count">N/A</span>
    <div class="score-info-container">
      <span class="current-score">0P</span>
      <span class="current-multiplier">N/A</span>
    </div>
  </div>
  <hr>
  <div class="total-score-container">
    <span class="total-score">N/A</span>
  </div>
</div>

<style>
  .score-board {
    display: flex;
    flex-direction: column;
    width: 90%;
    height: 100%;
    background-color: var(--primary);
    border: 1rem solid var(--primary-border);
    border-radius: 2rem;
    padding: 1.5rem;
    align-items: center;
    justify-content: space-between;
    gap: 0;
  }

  hr {
    margin: 0;
    width: 100%;
    height: 3px;
    background-color: var(--primary-border);
    border-width: 0;
  }

  .user-info-container {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    gap: 1rem;
    padding: .5rem;
    z-index: 0;
  }

  .user-picture-container {
    position: relative;
    width: 5rem;
    height: auto;
    aspect-ratio: 1 / 1;
  }

  .user-picture {
    width: 100%;
    height: 100%;
    border-radius: var(--br-medium);
    background-color: black;
    outline: 2px solid var(--accent);
  }

  .user-name {
    font-size: 1.5em;
    overflow-wrap: anywhere;
  }

  .game-info-container {
    display: flex;
    flex-direction: column;
    padding: .5rem;
    justify-content: center;
    align-items: center;
    gap: .5rem;
    width: 100%;
  }

  .round-count {
    font-size: 1.5em;
  }

  .score-info-container {
    display: flex;
    flex-direction: row;
    width: 100%;
    justify-content: space-between;
    align-items: center;
  }

  .current-score {
    font-size: 2em;
    width: 100%;
    text-align: center;
  }

  .current-multiplier {
    font-size: 2em;
    text-align: center;
    width: 100%;
  }

  .total-score-container {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: .5rem;
  }

  .total-score {
    font-size: 2.5em;
  }
</style>

<script>
  import { WORD_LENGTH } from "../../lib/config";
  import { Cursor } from "../../lib/cursor";
  import type { GameSession } from "../../lib/gameSession";
  import { range } from "../../lib/helpers";
  import { animateScoreAdding } from "../../scripts/scoreAddingAnimation";

  const roundCountLabel = document.querySelector<HTMLSpanElement>('.round-count');
  const currentScoreLabel = document.querySelector<HTMLSpanElement>('.current-score');
  const currentMultiplierLabel = document.querySelector<HTMLSpanElement>('.current-multiplier');
  const totalScoreLabel = document.querySelector<HTMLSpanElement>('.total-score');
  const charTiles = document.querySelectorAll<HTMLDivElement>('.char-tile');

  window.addEventListener("updateScoreBoard", async (e) => {
    const gameSession: GameSession = (e as CustomEvent).detail.gameSession;
    const scores: Array<Array<number>> = (e as CustomEvent).detail.scores;

    await updateScoreBoard(gameSession, scores);
  });

  async function updateScoreBoard(gameSession: GameSession, scores: Array<Array<number>>) {
    // Set round count
    const roundCountText = `Game ${gameSession.current_game_index + 1}`;
    roundCountLabel!.textContent = roundCountText;

    // Set current score
    if (gameSession.status == "game_found") {
      const totalScore = scores.reduce((acc, row) => {
        return acc + row.reduce((acc2, val) => {
          return acc2 + val;
        }, 0);
      }, 0);
      currentScoreLabel!.textContent = `${totalScore}P`;
    }
    // Animate scores if feedback is returned
    else if (gameSession.status == "return_feedback" && gameSession.current_guess_valid) {
      const rowBefore = gameSession.guesses_used - 1;
      for await (const i of range(WORD_LENGTH)) {
        const charTile = charTiles[Cursor.coordToIdx(i, rowBefore)];
        await animateScoreAdding(
          charTile,
          scores[rowBefore][i],
          currentScoreLabel!
        );
      }
    }

    // Set multiplier
    const multiplierText = `x${(1 + gameSession.current_game_index * 0.1).toFixed(1)}`;
    currentMultiplierLabel!.textContent = multiplierText;

    // Set total score
    let total: number = 0;
    gameSession.scores?.forEach(score => {
      total += score;
    });
    totalScoreLabel!.textContent = `${total}P`;
  }
</script>