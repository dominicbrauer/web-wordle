---
import DigitalKeyboard from "../../components/game/DigitalKeyboard.astro"
import WordGrid from "../../components/game/WordGrid.astro"
import Layout from "../../layouts/Layout.astro"
---

<Layout title="Classic Game">
  <div class="game-frame">
    <WordGrid />
    <DigitalKeyboard />
  </div>
</Layout>

<style>
  .game-frame {
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 100%;
    margin: 1rem auto;
    gap: 1rem;
  }
  
  body {
    display: flex;
    flex-direction: column;
  }

  @media screen (max-width: 700px) {

  }
</style>

<script>
  ////////// Imports //////////
  import { KEYBOARD_KEYS } from "../../lib/constants";
  import type { GameSession} from "../../lib/gameSession";
  import { requestGameSession } from "../../scripts/requestGameSession";
  import { guessRequest } from "../../scripts/guessRequest";
  ////////// Imports //////////


  ////////// Variables //////////
  const pageBody = document.querySelector('body') as HTMLBodyElement;
  let gameSession: GameSession = await requestGameSession();
  let blockUserInputs: boolean = false;
  ////////// Variables //////////


  ////////// Event Listeners //////////
  pageBody?.addEventListener('keydown', (e) => {
    const keyInput: string = e.key.toUpperCase();

    if (!validKeyInput(keyInput)) return;
    const event = new CustomEvent("keyInput", {
      detail: {
        keyInput: keyInput,
      }
    });
    window.dispatchEvent(event);
  });


  window.addEventListener("guessRequest", async (e) => {
    const event = e as CustomEvent;

    gameSession.current_guess = event.detail.word;
    gameSession.status = "submit_guess";
    gameSession.current_guess_valid = false;

    gameSession = await guessRequest(gameSession);
    triggerUpdate();
  });
  ////////// Event Listeners //////////


  ////////// Functions //////////
  /**
   * Validates an input key
   * @param key - keyboard key
   * @returns Whether the key is valid
   */
   function validKeyInput(key: string): boolean {
    let found: boolean = false;

    KEYBOARD_KEYS?.forEach(row => {
      if (row.includes(key) || ['ENTER', 'BACKSPACE'].includes(key)) found = true;
    });

    return found;
  }


  /**
   * Transmits the current gameSession as an event
   */
  function triggerUpdate(): void {
    const event = new CustomEvent("transmitCurrentGameState", {
      detail: {
        gameSession: gameSession,
      }
    });
    window.dispatchEvent(event);
  }
  ////////// Functions //////////


  triggerUpdate();
</script>