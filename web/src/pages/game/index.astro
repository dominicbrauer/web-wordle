---
import DigitalKeyboard from "../../components/game/DigitalKeyboard.astro"
import WordGrid from "../../components/game/WordGrid.astro"
import Layout from "../../layouts/Layout.astro"
---

<Layout>
  <WordGrid />
  <DigitalKeyboard />
</Layout>

<script>
  import { KEYBOARD_KEYS } from "../../lib/constants";
  import type { Scoring, Char, Guess, GameSession } from "../../lib/gameSession";


  const gameSession: GameSession = await (async function requestGameSession(): Promise<GameSession> {
    const response = await fetch('http://localhost:8080/api/start-game', {
      method: 'GET',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    if (!response.ok) {
      throw new Error(`Error: ${response.statusText}`);
    }
    return await response.json() as GameSession;
  })();



  const pageBody = document?.querySelector('body') as HTMLBodyElement;
  const charTiles = document?.querySelectorAll('.char-tile') as NodeListOf<HTMLDivElement>;


  class Cursor {
    public x: number = 0;
    public y: number = gameSession.guesses_used;
    public selfSet: boolean = false;
    public oob: boolean = false; // oob: out of bounds

    public getPos(): number {
      return this.x + 5 * this.y;
    }
  }
  const cursor: Cursor = new Cursor();
  charTiles[cursor.getPos()].classList.add('char-tile-selected');


  /**
   * Activates the current row based on `cursor.y`.
   * This also deactivates all other rows.
   */
  function shiftRow() {
    charTiles.forEach(tile => {
      tile.classList.remove('active-row');
    });
    for (let idx = 0; idx < 5; idx++) {
      charTiles[cursor.y * 5 + idx].classList.add('active-row');
    }
  }
  shiftRow();


  function validKeyInput(key: string): boolean {
    let found: boolean = false;
    KEYBOARD_KEYS.push(['ENTER', 'BACKSPACE']);
    KEYBOARD_KEYS?.forEach(row => {
      if (row.includes(key)) {
        found = true;
      }
    });
    return found;
  }


  function addSelectionClass() {
    charTiles[cursor.getPos()].classList.add('char-tile-selected');
  }
  function removeSelectionClass() {
    charTiles[cursor.getPos()].classList.remove('char-tile-selected');
  }


  function handleKeyboardInput(key: string) {
    switch(key) {
      case 'ENTER': {
        console.log("Enter");
        break;
      }
      case 'BACKSPACE': {
        if (cursor.x < 1) break;
        if ((cursor.selfSet && charTiles[cursor.getPos()].innerText != '') || cursor.oob) {
          cursor.oob = false;
          charTiles[cursor.getPos()].innerText = '';
          addSelectionClass();
        } else {
          charTiles[cursor.getPos()-1].innerText = '';
          if (cursor.x > 0) {
            removeSelectionClass();
            cursor.x--;
            addSelectionClass();
          }
        }
        break;
      }
      default: {
        if (cursor.oob) {
          break;
        }
        charTiles[cursor.getPos()].innerText = key.toUpperCase();
        if (cursor.x <= 3) {
          removeSelectionClass();
          cursor.x++;
          addSelectionClass();
        } else {
          cursor.oob = true;
          removeSelectionClass();
        }
      }
    }
    console.log("X: " + cursor.x + " Y: " + cursor.y);
    cursor.selfSet = false;
  }


  pageBody?.addEventListener('keydown', (event) => {
    const keyInput: string = event.key.toUpperCase();
    if (!validKeyInput(keyInput)) {
      return;
    }
    handleKeyboardInput(keyInput);
  });


  charTiles?.forEach((tile, idx) => {
    if (tile.classList.contains('active-row')) {
      tile?.addEventListener('click', () => {
        cursor.selfSet = true;
        cursor.oob = false;
        removeSelectionClass();
        cursor.x = idx % 5;
        cursor.y = Math.floor(idx / 5);
        addSelectionClass();
      });
    }
  });
</script>