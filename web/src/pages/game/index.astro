---
import Assistant from "../../components/game/Assistant.astro"
import DigitalKeyboard from "../../components/game/DigitalKeyboard.astro"
import WordGrid from "../../components/game/WordGrid.astro"
import Layout from "../../layouts/Layout.astro"
import { GUESSES, ROW_MULTIPLIERS } from "../../lib/config"
---

<Layout title="Classic Game">
  <div class="game-frame">
    <div class="grid-area">
      <div class="factor-container">
        {Array.from({ length: GUESSES }).map((_, index) => (
          <span class="factor">x{ROW_MULTIPLIERS[index]}</span>
        ))}
      </div>
      <WordGrid />
      <div class="score-container">
        {Array.from({ length: GUESSES }).map(() => (
          <span class="score">0</span>
        ))}
      </div>
    </div>
    <Assistant />
    <DigitalKeyboard />
  </div>
</Layout>

<style>
  .game-frame {
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    width: fit-content;
    height: 100%;
    margin: 1rem auto;
    gap: 1rem;
  }

  .grid-area {
    display: flex;
    flex-direction: row;
    height: fit-content;
    justify-content: center;
  }

  .factor-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-around;
    width: 6rem;
    margin: 0 .5rem;
  }

  .factor {
    font-size: 2em;
    color: var(--text-primary);
    background-color: var(--primary);
    border-radius: var(--br-tile);
    padding: 0 .5rem;
  }

  .factor.disabled {
    background-color: var(--secondary);
    color: var(--text-secondary);
  }

  .score-container {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: start;
    justify-content: space-around;
    width: 6rem;
    padding-left: 1.5rem;
  }

  .score {
    font-size: 2em;
  }

  body {
    display: flex;
    flex-direction: column;
  }
</style>

<script>
  import { GUESSES, KEYBOARD_KEYS } from "../../lib/config";
  import type { GameSession} from "../../lib/gameSession";
  import { requestGameSession } from "../../scripts/requestGameSession";
  import { guessRequest } from "../../scripts/guessRequest";
  import { requestContinue } from "../../scripts/requestContinue"
  import { range } from "../../lib/helpers";


  const pageBody = document.querySelector('body') as HTMLBodyElement;
  const factorLabels = document.querySelectorAll<HTMLSpanElement>('.factor');
  const scoreLabels = document.querySelectorAll<HTMLSpanElement>('.score');

  let gameSession: GameSession;
  try {
    gameSession = await requestGameSession();
  } catch {
    const showAssistantMessage = new CustomEvent("showAssistantMessage", {
      detail: {msg: "I couldn't connect to the server."}
    });
    window.dispatchEvent(showAssistantMessage);
  }


  pageBody?.addEventListener('keydown', (e) => {
    const keyInput: string = e.key.toUpperCase();

    if (!validKeyInput(keyInput)) return;
    const event = new CustomEvent("keyInput", {
      detail: {
        keyInput: keyInput,
      }
    });
    window.dispatchEvent(event);
  });


  window.addEventListener("guessRequest", async (e) => {
    gameSession.current_guess = (e as CustomEvent).detail.word;
    gameSession.status = "submit_guess";
    gameSession.current_guess_valid = false;

    gameSession = await guessRequest(gameSession);
    triggerUpdate();
  });


  window.addEventListener("analyseGameState", () => {
    analyseGameState();
  });


  /**
   * Validates an input key
   * @param key - keyboard key
   * @returns Whether the key is valid
   */
   function validKeyInput(key: string): boolean {
    let found: boolean = false;

    KEYBOARD_KEYS?.forEach(row => {
      if (row.includes(key) || ['ENTER', 'BACKSPACE'].includes(key)) found = true;
    });

    return found;
  }


  /**
   * Transmits the current gameSession as an event
   */
  function triggerUpdate(): void {
    for (const i of range(gameSession.guesses_used)) {
      if (!gameSession.guesses[i].was_correct) {
        factorLabels[i].classList.add('disabled');
      }
    }
    
    const updateWordGrid = new CustomEvent("updateWordGrid", {
      detail: {gameSession: gameSession}
    });
    window.dispatchEvent(updateWordGrid);

    const updateDigitalKeyboard = new CustomEvent("updateDigitalKeyboard", {
      detail: {gameSession: gameSession}
    });
    window.dispatchEvent(updateDigitalKeyboard);
  }


  /**
   * Analyses if the the last word was correct
   * or if all guesses have been used up.
   */
  async function analyseGameState(): Promise<void> {
    // Correct guess: Win
    if (gameSession.guesses_used > 0) {
      if (gameSession.guesses[gameSession.guesses_used - 1].was_correct) {
        await handleWin();
      }
    }

    // No guesses left: Lose
    if (gameSession.guesses_used >= GUESSES) {
      handleLose();
    }
  }


  /**
   * Handles winning the game (correct word).
   */
  async function handleWin(): Promise<void> {

    factorLabels.forEach(factor => {
      factor.classList.remove('disabled');
    });

    scoreLabels.forEach(score => {
      score.textContent = "0";
    });

    console.log(gameSession.scores);

    gameSession = await requestContinue(gameSession);

    const resetWordGrid = new CustomEvent("resetWordGrid", {
      detail: {gameSession: gameSession}
    });
    window.dispatchEvent(resetWordGrid);
    // const resetDigitalKeyboard = new CustomEvent("resetDigitalKeyboard");
    // window.dispatchEvent(resetDigitalKeyboard);
  }


  /**
   * Handles losing the game (all guesses used).
   */
  function handleLose(): void {
    const showAssistantMessage = new CustomEvent("showAssistantMessage", {
      detail: {msg: "You lost! :pepoSadge:"}
    });
    window.dispatchEvent(showAssistantMessage);
    // window.location.replace("http://localhost:4321");
  }


  triggerUpdate();
</script>