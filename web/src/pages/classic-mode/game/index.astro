---
import Assistant from "../../../components/game/Assistant.astro";
import DigitalKeyboard from "../../../components/game/DigitalKeyboard.astro";
import LogoSection from "../../../components/game/LogoSection.astro";
import ScoreBoard from "../../../components/game/ScoreBoard.astro";
import WordGrid from "../../../components/game/WordGrid.astro";
import GameOverPopup from "../../../components/GameOverPopup.astro";
import Layout from "../../../layouts/Layout.astro";
---

<Layout title="Classic Mode Game">
	<div class="game-frame">
		<div class="upper-area">
			<div class="side left">
				<LogoSection />
				<Assistant />
			</div>
			<WordGrid />
			<div class="side right">
				<ScoreBoard />
			</div>      
		</div>
		
		<DigitalKeyboard />
	</div>
	<GameOverPopup />
</Layout>

<style>
	.game-frame {
		position: relative;
		display: flex;
		flex-direction: column;
		justify-content: space-between;
		align-items: center;
		width: fit-content;
		height: 100%;
		margin: 1rem auto;
		gap: 1rem;
	}

	.upper-area {
		display: flex;
		flex-direction: row;
		height: fit-content;
		justify-content: center;
		gap: 2rem;
	}

	.side {
		display: flex;
		padding: 1.5rem;
		width: 400px;
		height: 100%;
	}

	.side.left {
		flex-direction: column;
		gap: 1rem;
		justify-content: center;
	}

	.side.right {
		align-items: center;
		justify-content: left;
	}

	body {
		display: flex;
		flex-direction: column;
	}
</style>

<script>
	import { ROW_MULTIPLIERS } from "../../../lib/config";
	import { GUESSES, KEYBOARD_KEYS, WORD_LENGTH, GRAY_TILE_VALUE, YELLOW_TILE_VALUE, GREEN_TILE_VALUE } from "../../../lib/config";
	import type { Game, GameSession, Scoring} from "../../../lib/models";
	import { addScores } from "../../../lib/helpers";
	import { submitGuess, requestGameSession, requestNextGame, saveGameData } from "../../../scripts/gameRequests"

	const pageBody = document.querySelector('body') as HTMLBodyElement;

	let currentGameSession: GameSession;
	let currentGame: Game;
	

	pageBody?.addEventListener('keydown', (e) => {
		const keyInput: string = e.key.toUpperCase();

		if (!validKeyInput(keyInput)) return;
		window.dispatchEvent(new CustomEvent("keyInput", {
			detail: { keyInput: keyInput }
		}));
	});

	window.addEventListener("submitGuess", async (e) => {
		currentGame.currentGuess = (e as CustomEvent).detail.word;

		currentGameSession.status = "submit_guess";
		currentGameSession.games[currentGameSession.gameIndex] = currentGame;

		currentGameSession = await submitGuess(currentGameSession);
		currentGame = currentGameSession.games[currentGameSession.gameIndex];

		triggerUpdate();
	});

	window.addEventListener("analyseGameState", async () => {
		await analyseGameState();
	});

	/**
	 * Updates the shown text in the Assistant container.
	 * @param msg Message to display
	 */
	function updateAssistantMessage(msg: string) {
		window.dispatchEvent(new CustomEvent("showAssistantMessage", {
			detail: {msg: msg}
		}));
	}

	/**
	 * Validates an input key
	 * @param key - keyboard key
	 * @returns Whether the key is valid
	 */
	 function validKeyInput(key: string): boolean {
		let found: boolean = false;

		KEYBOARD_KEYS?.forEach(row => {
			if (row.includes(key) || ['ENTER', 'BACKSPACE'].includes(key)) found = true;
		});

		return found;
	}

	/**
	 * Transmits the current Game as an event.
	 */
	function triggerUpdate() {
		// Invalid guess
		if (!currentGame.currentGuess_valid && currentGameSession.status == "return_feedback") {
			window.dispatchEvent(new CustomEvent("headShake", {
				detail: {row: currentGame.guessesUsed}
			}));
		}

		if (currentGame.guessesUsed < GUESSES) {
			window.dispatchEvent(new CustomEvent("initWordRows", {
				detail: {currentGame: currentGame}
			}));
		}

		window.dispatchEvent(new CustomEvent("updateWordGrid", {
			detail: {currentGame: currentGame, currentGameSession: currentGameSession}
		}));

		window.dispatchEvent(new CustomEvent("updateDigitalKeyboard", {
			detail: {currentGame: currentGame}
		}));

		window.dispatchEvent(new CustomEvent("updateScoreBoard", {
			detail: {currentGame: currentGame, currentGameSession: currentGameSession, scores: calcScores()}
		}));
	}

	/**
	 * Calculates the scores for each guess
	 * based on the feedback colors.
	 * @return 2D-array with score values
	 */
	function calcScores(): Array<Array<number>> {
		// Empty scores 2D-array
		const scores: number[][] = Array.from({ length: GUESSES }, () =>
			Array(WORD_LENGTH).fill(0)
		);

		currentGame.guesses?.forEach((guess, i) => {
			const colors: Array<Scoring> = [];
			
			// Gets the colors of a word
			guess.characterInfo.forEach(char => {
				colors.push(char.scoring);
			});

			// Colors and their score values
			const colorMap: Record<Scoring, number> = {
				GRAY: GRAY_TILE_VALUE,
				YELLOW: YELLOW_TILE_VALUE,
				GREEN: GREEN_TILE_VALUE
			};

			// Adds score values to scores[][]
			colors?.forEach((color, j) => {
				scores[i][j] = colorMap[color];
			});
		});

		return scores;
	}

	/**
	 * Analyses the current game state for
	 * winning/losing conditions.
	 */
	async function analyseGameState() {
		// Correct guess: Win
		if (currentGame.guesses[currentGame.guessesUsed - 1]?.wasCorrect) {
			await handleWin();
			return;
		}

		// No guesses left: Lose
		if (currentGame.guessesUsed >= GUESSES) {
			await handleLose();
			return;
		}
	}

	/**
	 * Calculates the final score if a game
	 * has been won.
	 * @returns the final score with all multipliers applied
	 */
	function calcFinalScore(): number {
		return addScores(calcScores())
			* ROW_MULTIPLIERS[currentGame.guessesUsed - 1]
			* (1 + currentGameSession.gameIndex * 0.1);
	}

	/**
	 * Handles winning the game (correct word).
	 */
	async function handleWin() {
		currentGameSession.games[currentGameSession.gameIndex].finalScore = calcFinalScore();

		currentGameSession = await requestNextGame(currentGameSession);
		currentGame = currentGameSession.games[currentGameSession.gameIndex];

		// handle win

		window.dispatchEvent(new CustomEvent("resetWordGrid", {
			detail: {currentGame: currentGame}
		}));

		triggerUpdate();
	}

	/**
	 * Handles losing the game (all guesses used).
	 */
	async function handleLose() {
		window.dispatchEvent(new CustomEvent("showAssistantMessage", {
			detail: {msg: "Oh no, you lost! You have no guesses left... Next time you'll win!"}
		}));

		try {
			await saveGameData(currentGameSession);
		} catch(e) {}

		const overlay = document.createElement('div');
		document.body.appendChild(overlay);
		overlay.style.width = '100%';
		overlay.style.height = '100%';
		overlay.style.position = 'absolute';
		overlay.style.background = 'rgba(0, 0, 0, 0.5)';
		overlay.style.backdropFilter = 'blur(1px)';
		overlay.style.zIndex = '100';

		const popup = document.querySelector<HTMLDivElement>('.game-over-popup');
		popup!.style.display = 'block';

		let total: number = 0;
		currentGameSession.games?.forEach(game => {
			total += game.finalScore;
		});
		document.querySelector<HTMLSpanElement>('.game-over-popup-score')!.textContent = `Score: [${total}P]`;
	}

	try {
		currentGameSession = await requestGameSession();
		currentGame = currentGameSession.games[currentGameSession.gameIndex]!;
		triggerUpdate();
	} catch (error) {
		window.location.replace("/error?type=backend");
	}
</script>